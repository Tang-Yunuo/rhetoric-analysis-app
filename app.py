# -*- coding: utf-8 -*-
"""streamlit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rm6nuxzBR23C7ND5RuJzrwqQgchzdGpq
"""

import streamlit as st
import json
import os
import plotly.graph_objects as go
import plotly.express as px
import numpy as np
import pandas as pd
import streamlit.components.v1 as components
from pyvis.network import Network
import networkx as nx
import tempfile

# --- 1. API 金鑰讀取 ---
import openai
from openai import OpenAI
client = OpenAI(api_key=st.secrets["openai_api_key"])
# --- 2. 核心分析函式 ---

def analyze_full(text_input):
    prompt = f"""
    你是一位修辭與心理語言學分析專家，請依據下列說明分析詐騙語句的心理與修辭策略，並以 JSON 陣列格式輸出，不要補充說明。

📌 修辭類型（rhetoric）：
請對每段語句進行多面向的評估，**每項修辭與心理類別皆可能同時出現，只是強度不同**。
請將修辭（rhetoric）與心理作用（psychology）各自輸出為一組包含三個項目的數值（範圍為 0~1），代表每一類的程度高低，**不必加總為 1，也不需將其他項目設為 0**。

例如：
- 一段語句可能同時帶有權威感（ethos: 0.7）、情緒威脅（pathos: 0.4）、也略帶條理說明（logos: 0.3）
- 也可能激起社會信任（0.8）和情緒反應（0.6）並引發部分認知思考（0.4）

請避免使用極端值（如只有一項為 1 其他全為 0），除非該語句明確單一面向。


📌 心理作用分類（psychology）：
請依據下列三項心理反應，評估每段語句誘發的心理強度（0~1，獨立評估）：
- 社會信任：增加對權威、制度、機構的信賴
- 情緒反應：激起焦慮、緊張、驚恐等情緒
- 認知判斷：促使理性評估或推理行為

📌 說服策略（persuasion_principle）：
請判斷該段語句是否應用了以下六大說服原則之一（擇一，若無請填入 \"None\"）：
- Reciprocity（互惠）
- Commitment & Consistency（承諾與一致）
- Social Proof（社會認同）
- Authority（權威）
- Liking（喜好）
- Scarcity（稀缺）

請將以下詐騙語句切分為多段（每段為 1~2 子句），並對每段標註：
- text
- rhetoric: ethos / pathos / logos
- psychology: 社會信任 / 情緒反應 / 認知判斷
- scores: ethos / pathos / logos（0~1）

📌 輸出格式範例：
[
  {{
    "text": "（原始語句）",
    "rhetoric": {{"ethos": 0.7, "pathos": 0.3, "logos": 0.2}},
    "psychology": {{"社會信任": 0.6, "情緒反應": 0.4, "認知判斷": 0.3}},
    "persuasion_principle": "Authority"
  }},
  ...
]

📌 請對以下詐騙語句進行分析：
請以 JSON 陣列輸出，不要補充說明：
{text_input}
    """

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": prompt}]
    )

    raw = response.choices[0].message.content
    return json.loads(raw)

# --- 3. 修辭三角區域圖函式 ---
def plot_ternary_triangle(ethos_ratio, pathos_ratio, logos_ratio):
    points = {
        "Ethos": [1, 0, 0],
        "Pathos": [0, 1, 0],
        "Logos": [0, 0, 1],
        "Center": [ethos_ratio, pathos_ratio, logos_ratio]
    }
    triangles = [
        {"a": [points["Ethos"][0], points["Center"][0], points["Logos"][0]],
         "b": [points["Ethos"][1], points["Center"][1], points["Logos"][1]],
         "c": [points["Ethos"][2], points["Center"][2], points["Logos"][2]],
         "color": "rgba(59,130,246,0.5)", "label": "Ethos 區域"},
        {"a": [points["Pathos"][0], points["Center"][0], points["Ethos"][0]],
         "b": [points["Pathos"][1], points["Center"][1], points["Ethos"][1]],
         "c": [points["Pathos"][2], points["Center"][2], points["Ethos"][2]],
         "color": "rgba(244,63,94,0.5)", "label": "Pathos 區域"},
        {"a": [points["Logos"][0], points["Center"][0], points["Pathos"][0]],
         "b": [points["Logos"][1], points["Center"][1], points["Pathos"][1]],
         "c": [points["Logos"][2], points["Center"][2], points["Pathos"][2]],
         "color": "rgba(34,197,94,0.5)", "label": "Logos 區域"}
    ]
    fig = go.Figure()
    for tri in triangles:
        fig.add_trace(go.Scatterternary(
            a=tri["a"], b=tri["b"], c=tri["c"],
            mode="lines", fill="toself", name=tri["label"],
            line=dict(width=2, color=tri["color"]), fillcolor=tri["color"]
        ))
    fig.add_trace(go.Scatterternary(
        a=[points["Center"][0]], b=[points["Center"][1]], c=[points["Center"][2]],
        mode='markers+text',
        marker=dict(color="black", size=15),
        text=["詐騙段落修辭分布"],
        name="分布中心", textposition="top center",
        hovertemplate='Ethos: %{a:.4f}<br>Pathos: %{b:.4f}<br>Logos: %{c:.4f}<extra></extra>'
    ))
    fig.update_layout(title="修辭比例視覺化", ternary=dict(aaxis=dict(title="Ethos"), baxis=dict(title="Pathos"), caxis=dict(title="Logos"), sum=1))
    return fig

# --- 4. 修辭結構分佈氣泡圖函式 ---
def plot_bubble_chart(result):
    data = []
    for s in result:
        if 'rhetoric' in s and 'psychology' in s and all(k in s['rhetoric'] for k in ['ethos', 'pathos', 'logos']):
            total = sum([s['rhetoric']['ethos'], s['rhetoric']['pathos'], s['rhetoric']['logos']])
            if total == 0: continue
            data.append({
                "text": s.get("text"),
                "Ethos": s['rhetoric']['ethos'] / total,
                "Pathos": s['rhetoric']['pathos'] / total,
                "Logos": s['rhetoric']['logos'] / total,
                "emotion_strength": np.mean([
                    s['psychology']['社會信任'],
                    s['psychology']['情緒反應'],
                    s['psychology']['認知判斷']
                ])
            })
    df = pd.DataFrame(data)
    fig = px.scatter_ternary(df, a="Ethos", b="Pathos", c="Logos", size="emotion_strength", color="emotion_strength", color_continuous_scale="RdYlBu_r", hover_name="text", size_max=20)
    fig.update_layout(title="多段語句的修辭結構分佈圖（氣泡大小代表心理影響強度）", ternary=dict(aaxis_title="Ethos", baxis_title="Pathos", caxis_title="Logos"))
    return fig

# --- 5. 修辭構面 3D 空間圖函式 ---
def plot_rhetoric_3d(result):
    df_3d = pd.DataFrame([{
        "Ethos": s['rhetoric']['ethos'],
        "Pathos": s['rhetoric']['pathos'],
        "Logos": s['rhetoric']['logos'],
        "emotion_strength": np.mean([s['psychology']['社會信任'], s['psychology']['情緒反應'], s['psychology']['認知判斷']]),
        "text": s.get("text")
    } for s in result])
    fig = go.Figure(data=[go.Scatter3d(x=df_3d["Ethos"], y=df_3d["Pathos"], z=df_3d["Logos"], text=df_3d["text"], mode='markers+text', marker=dict(size=df_3d["emotion_strength"] * 30, color=df_3d["emotion_strength"], colorscale='Viridis', opacity=0.8, colorbar=dict(title="心理強度")), hovertemplate="<b>語句</b>: %{text}<br>Ethos: %{x:.2f}<br>Pathos: %{y:.2f}<br>Logos: %{z:.2f}<extra></extra>")])
    fig.update_layout(title="詐騙語句修辭構面 3D 空間圖", scene=dict(xaxis=dict(title='Ethos', range=[0, 1]), yaxis=dict(title='Pathos', range=[0, 1]), zaxis=dict(title='Logos', range=[0, 1])), margin=dict(l=0, r=0, b=0, t=40))
    return fig

# --- 6. 心理構面 3D 空間圖函式 ---
def plot_psychology_3d(result):
    df_psych_3d = pd.DataFrame([{
        "社會信任": s['psychology']['社會信任'],
        "情緒反應": s['psychology']['情緒反應'],
        "認知判斷": s['psychology']['認知判斷'],
        "rhetoric_strength": np.mean([s['rhetoric']['ethos'], s['rhetoric']['pathos'], s['rhetoric']['logos']]),
        "text": s.get("text")
    } for s in result])
    fig = go.Figure(data=[go.Scatter3d(x=df_psych_3d["社會信任"], y=df_psych_3d["情緒反應"], z=df_psych_3d["認知判斷"], text=df_psych_3d["text"], mode='markers+text', marker=dict(size=df_psych_3d["rhetoric_strength"] * 30, color=df_psych_3d["rhetoric_strength"], colorscale='Plasma', opacity=0.8, colorbar=dict(title="修辭強度")), hovertemplate="<b>語句</b>: %{text}<br>社會信任: %{x:.2f}<br>情緒反應: %{y:.2f}<br>認知判斷: %{z:.2f}<extra></extra>")])
    fig.update_layout(title="詐騙語句心理構面 3D 空間圖", scene=dict(xaxis=dict(title='社會信任', range=[0, 1]), yaxis=dict(title='情緒反應', range=[0, 1]), zaxis=dict(title='認知判斷', range=[0, 1])), margin=dict(l=0, r=0, b=0, t=40))
    return fig

# --- 7. 情緒強度分析 bar 圖函式 ---
def plot_emotion_bar_chart(social_trust_ratio, reaction_to_emotion_ratio, cognitive_understanding_ratio):
    labels = ['社會信任', '情緒反應', '認知判斷']
    values = [social_trust_ratio * 100, reaction_to_emotion_ratio * 100, cognitive_understanding_ratio * 100]
    colors = ['#60a5fa', '#f87171', '#34d399']
    fig = go.Figure(go.Bar(x=values, y=labels, orientation='h', marker_color=colors, text=[f'{v:.1f}%' for v in values], textposition='outside', hovertemplate='<b>%{y}</b><br>心理效果強度: %{x:.1f}%<extra></extra>'))
    fig.update_layout(title='情緒強度分析（情緒反應 / 社會信任 / 認知判斷）', xaxis_title='心理效果強度（百分比）', xaxis_range=[0, 100], yaxis=dict(tickfont=dict(size=14)), margin=dict(l=60, r=60, t=60, b=40), height=400)
    return fig

# --- 8. 修辭與心理網絡圖（pyvis）函式 ---
def generate_network_html(result):
    G = nx.Graph()
    rhetoric_nodes = ["Ethos", "Pathos", "Logos"]
    psychology_nodes = ["社會信任", "情緒反應", "認知判斷"]
    for r_node in rhetoric_nodes:
        G.add_node(r_node, label=r_node, color="#97C2FC")
    psychology_colors = {"社會信任": "#B19CD9", "情緒反應": "#FFB347", "認知判斷": "#77DD77"}
    for p_node in psychology_nodes:
        G.add_node(p_node, label=p_node, color=psychology_colors[p_node])
    edges = [("Ethos", "社會信任", "增加可信性與認同感知"), ("Pathos", "情緒反應", "激發直覺與即時行動"), ("Logos", "認知判斷", "促使理性分析與決策")]
    for edge in edges:
        G.add_edge(edge[0], edge[1], title=edge[2])
    for idx, seg in enumerate(result):
        seg_text = seg.get("text") or seg.get("sentence", f"段落{idx+1}")
        seg_node = f"段落{idx+1}"
        G.add_node(seg_node, label=seg_node, color="#DDDDDD", title=seg_text)
        dominant_rhetoric = max(seg["rhetoric"], key=seg["rhetoric"].get)
        G.add_edge(seg_node, dominant_rhetoric, title=f"主要修辭：{dominant_rhetoric}")
        dominant_psychology = max(seg["psychology"], key=seg["psychology"].get)
        G.add_edge(seg_node, dominant_psychology, title=f"主要心理影響：{dominant_psychology}")
        if "persuasion_principle" in seg:
            principle = seg["persuasion_principle"]
            if principle and principle != "None":
                if principle not in G:
                    G.add_node(principle, label=principle, color="#facc15", shape="box")
                G.add_edge(seg_node, principle, title=f"說服策略：{principle}")
    net = Network(height="600px", width="100%", bgcolor="#ffffff", font_color="black", cdn_resources='remote')
    net.from_nx(G)
    net.repulsion(node_distance=300, spring_length=200)
    net.set_options('''
    {
      "nodes": {
        "font": {
          "size": 24
        }
      }
    }
    ''')
    
    tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".html", mode="w", encoding="utf-8")
    net.write_html(tmp_file.name)
    tmp_file.close()
    return tmp_file.name

# --- 9. Streamlit UI ---
st.set_page_config(layout="wide")
st.title("詐騙語言分析系統（修辭 × 心理模型）")

page = st.sidebar.radio("選擇頁面：", ["輸入分析語句", "修辭圖表分析", "3D 空間展示", "心理強度分析圖", "互動式網絡圖", "結語"])

if page == "輸入分析語句":
    example_text = "這是財金局核發的緊急通報。您帳戶的異常交易已觸發凍結機制。
請立即完成身分驗證，否則資金將無法提領。根據第九條金融條例，系統已自動進入高風險保護模式。
若三小時內未完成處理，您將承擔全額損失。"
    user_input = st.text_area("請輸入欲分析的語句：", value=example_text, height=200)
    if st.button("分析語句") and user_input:
        st.session_state.result = analyze_full(user_input)
        st.success("分析完成，請切換到其他頁面檢視圖表！")

if "result" in st.session_state:
    result = st.session_state.result
    ethos_ratio = np.mean([s['rhetoric']['ethos'] for s in result])
    pathos_ratio = np.mean([s['rhetoric']['pathos'] for s in result])
    logos_ratio = np.mean([s['rhetoric']['logos'] for s in result])
    social_trust_ratio = np.mean([s['psychology']['社會信任'] for s in result])
    reaction_to_emotion_ratio = np.mean([s['psychology']['情緒反應'] for s in result])
    cognitive_understanding_ratio = np.mean([s['psychology']['認知判斷'] for s in result])

    if page == "修辭圖表分析":
        st.subheader("1️⃣ 修辭三角區域圖")
        st.plotly_chart(plot_ternary_triangle(ethos_ratio, pathos_ratio, logos_ratio), use_container_width=True)

        st.subheader("2️⃣ 修辭結構分佈氣泡圖")
        st.plotly_chart(plot_bubble_chart(result), use_container_width=True)

    elif page == "3D 空間展示":
        st.subheader("3️⃣ 修辭構面 3D 空間圖")
        st.plotly_chart(plot_rhetoric_3d(result), use_container_width=True)

        st.subheader("4️⃣ 心理構面 3D 空間圖")
        st.plotly_chart(plot_psychology_3d(result), use_container_width=True)

    elif page == "心理強度分析圖":
        st.subheader("5️⃣ 情緒強度分析 Bar 圖")
        st.plotly_chart(
            plot_emotion_bar_chart(
                social_trust_ratio, reaction_to_emotion_ratio, cognitive_understanding_ratio),
            use_container_width=True)

    elif page == "互動式網絡圖":
        st.subheader("6️⃣ 修辭 × 心理網絡互動圖（Pyvis）")
        html_path = generate_network_html(result)
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        components.html(html_content, height=650, scrolling=True)

    elif page == "結語":
        st.markdown("""
        ## 感謝您使用本系統！

        本專案旨在透過修辭與心理構面分析技術，視覺化展示詐騙語句背後的操作策略與心理誘因，
        幫助使用者提升對數位語言操弄的辨識力。

        - 製作團隊：數位人文與AI課程（Ronald & Grace)
        - 理論基礎：修辭學（Aristotle/亞里斯多德）＋ 心理學（Cialdini's six principles of persuasion）＋語言學
        - 技術基礎：OpenAI API + Plotly + Pyvis + Streamlit 
        - 指導老師：創新國際學院（ＩＣＩ）呂欣澤 助理教授

        如有建議歡迎聯絡我們！
        聯絡資訊：110501071@g.nccu.edu.tw
        """)
